HOW TO USE minipieces
---------------------

First thing you have to do to use minipieces is to put the following
line whenever you plan to use it:

require_once("/path/to/lib/minipieces.php");

CREATE A BASIC TEMPLATE
-----------------------
First of all you have to create your template. minipieces uses PHP as the
templating language, so a simple template would look like this:

---
Hello <?=$name?>, this is a simple template!
---

Suppose it is saved in the simple.tpl file.

Now, in your code, you need to create a new minipiece object:

$template = new minipiece('/path/to/template/directory/simple.tpl');

This will give you a minipiece object binded to your template file. An
expection is thrown if there are problems accessing the template file
(non existent file, wrong permissions etc.).

Now that your minipiece is ready for use, you can start filling the
different variables ('name' in this example):

$template->set('name','Alex');

This will set the 'name' variable to the string 'Alex'.

So, if you now check if the 'name' varible is set:

$template->is_set('name');

you will receive a positive answer (True).

Last thing to do is to render your template:

$template->render();

and you will get

---
Hello Alex, this is a simple template!
---

as output.

CREATE NESTED TEMPLATES
-----------------------
After having played a little with a basic template, let's move a step
further and learn how we can nest templates.

We might have a template called statement.tpl:

---
I, <?=$name?>, declare I love chinese food.
---

and suppose we want name to be a little more complex than a simple first
name.

We can create a second template (let's call it name.tpl):

---
<?=$firstname?> <?=$surname?>
---

and include it in our statement.tpl template. But how?

First we create a minipiece object for the statement.tpl template:

$s = new minipiece('/path/to/templates/directory/statement.tpl');

Now, instead of setting the 'name' variable of the $s object directly,
we create a new minipiece object binded to name.tpl:

$n = new minipiece('/path/to/templates/directory/name.tpl');

We set all $n variables we need to:

$n->set('firstname', 'John');
$n->set('surname', 'Doe');

and then assign this object to $s 'name' variable:

$s->set('name', $n);

Rendering our statement will give us:

---
I, John Doe, declare I love chinese food.
---

as a result.
